// ============================================================================
// Gord Scripts ‚Äî Enhanced Script Manager
// Features: Persistent storage, shareable links, real-time updates
// ============================================================================

const CONFIG = {
    STORAGE_KEY: 'gordScriptsData',
    SHARE_BASE_URL: window.location.origin + window.location.pathname
};

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let scripts = [];
let currentUser = null;
let currentTags = [];
let currentScriptId = null;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
document.addEventListener('DOMContentLoaded', function() {
    initApp();
    setupEventListeners();
    checkUrlForScript();
});

async function initApp() {
    await loadScripts();
    renderScripts();
    updateStats();
    loadTheme();
    
    const savedUser = localStorage.getItem('currentUser');
    if (savedUser) {
        currentUser = JSON.parse(savedUser);
        updateAuthUI();
    }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ URL –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∫—Ä–∏–ø—Ç–∞ –ø–æ —Å—Å—ã–ª–∫–µ
function checkUrlForScript() {
    const urlParams = new URLSearchParams(window.location.search);
    const scriptId = urlParams.get('script');
    
    if (scriptId) {
        openScriptView(scriptId);
        // –û—á–∏—â–∞–µ–º URL –±–µ–∑ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        window.history.replaceState({}, document.title, window.location.pathname);
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å–∫—Ä–∏–ø—Ç–æ–≤
async function loadScripts() {
    try {
        const savedData = localStorage.getItem(CONFIG.STORAGE_KEY);
        if (savedData) {
            const data = JSON.parse(savedData);
            scripts = data.scripts || [];
            console.log('–°–∫—Ä–∏–ø—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ localStorage:', scripts.length);
        } else {
            await createDemoScripts();
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∫—Ä–∏–ø—Ç–æ–≤:', error);
        await createDemoScripts();
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ-—Å–∫—Ä–∏–ø—Ç–æ–≤
async function createDemoScripts() {
    scripts = [
        {
            id: generateId(),
            title: "–ê–≤—Ç–æ-—Ñ–∞—Ä–º –º–æ–Ω–µ—Ç",
            description: "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–±–æ—Ä –º–æ–Ω–µ—Ç –≤ Brookhaven —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤",
            code: `-- –ê–≤—Ç–æ-—Ñ–∞—Ä–º –º–æ–Ω–µ—Ç –¥–ª—è Brookhaven
local Players = game:GetService("Players")
local player = Players.LocalPlayer

function autoFarm()
    while true do
        wait(1)
        for _, coin in pairs(workspace.Coins:GetChildren()) do
            if coin:IsA("Part") then
                firetouchinterest(coin, player.Character.HumanoidRootPart, 0)
                wait(0.1)
                firetouchinterest(coin, player.Character.HumanoidRootPart, 1)
            end
        end
    end
end

autoFarm()`,
            author: "Gord",
            game: "Brookhaven",
            tags: ["–∞–≤—Ç–æ-—Ñ–∞—Ä–º", "–º–æ–Ω–µ—Ç—ã", "–±—Ä—É–∫—Ö–µ–π–≤–µ–Ω"],
            createdAt: new Date().toISOString(),
            views: 1250,
            likes: 89,
            downloads: 342
        },
        {
            id: generateId(),
            title: "ESP –¥–ª—è –∏–≥—Ä–æ–∫–æ–≤",
            description: "–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤ —á–µ—Ä–µ–∑ —Å—Ç–µ–Ω—ã —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π —Ü–≤–µ—Ç–æ–≤",
            code: `-- ESP —Å–∫—Ä–∏–ø—Ç
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local LocalPlayer = Players.LocalPlayer

function createESP(player)
    if player == LocalPlayer then return end
    
    local highlight = Instance.new("Highlight")
    highlight.Parent = player.Character
    highlight.FillColor = Color3.fromRGB(255, 0, 0)
    highlight.OutlineColor = Color3.fromRGB(255, 255, 255)
    highlight.Name = "ESP_" .. player.Name
end

Players.PlayerAdded:Connect(createESP)`,
            author: "Gord",
            game: "Universal",
            tags: ["ESP", "–∏–≥—Ä–æ–∫–∏", "–≤–∏–¥–∏–º–æ—Å—Ç—å"],
            createdAt: new Date(Date.now() - 86400000).toISOString(),
            views: 890,
            likes: 67,
            downloads: 234
        }
    ];
    
    await saveScripts();
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–æ–≤
async function saveScripts() {
    const dataToSave = {
        scripts: scripts,
        totalScripts: scripts.length,
        totalViews: scripts.reduce((acc, script) => acc + (script.views || 0), 0),
        lastUpdated: new Date().toISOString()
    };
    
    localStorage.setItem(CONFIG.STORAGE_KEY, JSON.stringify(dataToSave));
    console.log('–°–∫—Ä–∏–ø—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:', dataToSave);
    showNotification('–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!', 'success');
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    updateStats();
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ID
function generateId() {
    return Date.now().toString(36) + Math.random().toString(36).substr(2, 9);
}

// –£—Ç–∏–ª–∏—Ç—ã
function $(selector) {
    return document.querySelector(selector);
}

function showNotification(message, type = 'success') {
    const notification = document.getElementById('notification');
    const icon = document.getElementById('notificationIcon');
    const text = document.getElementById('notificationText');
    
    if (notification && icon && text) {
        notification.className = `notification ${type}`;
        icon.className = type === 'success' ? 'fas fa-check' : 'fas fa-exclamation-triangle';
        text.textContent = message;
        
        notification.classList.add('show');
        setTimeout(() => notification.classList.remove('show'), 3000);
    }
}

// –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Å–∫—Ä–∏–ø—Ç–æ–≤
function renderScripts(filteredScripts = null) {
    const scriptsGrid = document.getElementById('scriptsGrid');
    const scriptsToRender = filteredScripts || scripts;
    
    if (scriptsToRender.length === 0) {
        scriptsGrid.innerHTML = `
            <div class="no-scripts">
                <div class="no-scripts-icon">üìù</div>
                <h3>–°–ö–†–ò–ü–¢–û–í –ù–ï –ù–ê–ô–î–ï–ù–û</h3>
                <p>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –ø–µ—Ä–≤—ã–π —Å–∫—Ä–∏–ø—Ç!</p>
                <button class="btn btn-primary" onclick="showUploadModal()">
                    <i class="fas fa-upload"></i>
                    –ó–ê–ì–†–£–ó–ò–¢–¨ –°–ö–†–ò–ü–¢
                </button>
            </div>
        `;
        return;
    }
    
    scriptsGrid.innerHTML = scriptsToRender.map(script => `
        <div class="script-card" onclick="openScriptView('${script.id}')">
            <div class="script-header">
                <h3 class="script-title">${script.title}</h3>
                <span class="script-badge">${script.game}</span>
            </div>
            
            <div class="script-meta">
                <span class="script-author">
                    <i class="fas fa-user"></i>
                    ${script.author}
                </span>
                <span class="script-date">
                    <i class="fas fa-calendar"></i>
                    ${formatDate(script.createdAt)}
                </span>
                <span class="script-views">
                    <i class="fas fa-eye"></i>
                    ${script.views || 0}
                </span>
            </div>
            
            <p class="script-description">${script.description}</p>
            
            ${script.tags && script.tags.length > 0 ? `
                <div class="script-tags">
                    ${script.tags.slice(0, 3).map(tag => `
                        <span class="tag">${tag}</span>
                    `).join('')}
                    ${script.tags.length > 3 ? `<span class="tag">+${script.tags.length - 3}</span>` : ''}
                </div>
            ` : ''}
            
            <div class="script-stats">
                <span class="stat">
                    <i class="fas fa-eye"></i> ${script.views || 0}
                </span>
                <span class="stat">
                    <i class="fas fa-heart"></i> ${script.likes || 0}
                </span>
                <span class="stat">
                    <i class="fas fa-download"></i> ${script.downloads || 0}
                </span>
            </div>
            
            <div class="script-actions">
                <button class="btn btn-small" onclick="event.stopPropagation(); copyScript('${script.id}')">
                    <i class="fas fa-copy"></i>
                    –ö–û–ü–ò–†–û–í–ê–¢–¨
                </button>
                <button class="btn btn-primary btn-small" onclick="event.stopPropagation(); shareScript('${script.id}')">
                    <i class="fas fa-share"></i>
                    –ü–û–î–ï–õ–ò–¢–¨–°–Ø
                </button>
            </div>
        </div>
    `).join('');
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
function formatDate(dateString) {
    const date = new Date(dateString);
    const now = new Date();
    const diff = now - date;
    
    const minutes = Math.floor(diff / 60000);
    const hours = Math.floor(diff / 3600000);
    const days = Math.floor(diff / 86400000);
    
    if (minutes < 60) return `${minutes} –º–∏–Ω –Ω–∞–∑–∞–¥`;
    if (hours < 24) return `${hours} —á –Ω–∞–∑–∞–¥`;
    if (days < 7) return `${days} –¥–Ω –Ω–∞–∑–∞–¥`;
    
    return date.toLocaleDateString('ru-RU');
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
function updateStats() {
    const scriptsCount = document.getElementById('scriptsCount');
    const usersCount = document.getElementById('registeredCount');
    
    if (scriptsCount) scriptsCount.textContent = scripts.length;
    if (usersCount) {
        // –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π" - –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å
        const uniqueAuthors = [...new Set(scripts.map(script => script.author))];
        usersCount.textContent = uniqueAuthors.length + 150; // –ë–∞–∑–æ–≤–æ–µ —á–∏—Å–ª–æ + –∞–≤—Ç–æ—Ä—ã
    }
}

// –ü–æ–∏—Å–∫ —Å–∫—Ä–∏–ø—Ç–æ–≤
function searchScripts() {
    const searchTerm = document.getElementById('searchInput').value.toLowerCase();
    const filteredScripts = scripts.filter(script => 
        script.title.toLowerCase().includes(searchTerm) ||
        script.description.toLowerCase().includes(searchTerm) ||
        script.tags.some(tag => tag.toLowerCase().includes(searchTerm)) ||
        script.game.toLowerCase().includes(searchTerm)
    );
    
    renderScripts(filteredScripts);
}

// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–≥–∞–º–∏
function addTag() {
    const tagInput = document.getElementById('tagInput');
    const tag = tagInput.value.trim().toLowerCase();
    
    if (tag && !currentTags.includes(tag)) {
        currentTags.push(tag);
        renderTags();
        tagInput.value = '';
    }
}

function removeTag(index) {
    currentTags.splice(index, 1);
    renderTags();
}

function renderTags() {
    const tagsList = document.getElementById('tagsList');
    if (tagsList) {
        tagsList.innerHTML = currentTags.map((tag, index) => `
            <span class="tag">
                ${tag}
                <button type="button" onclick="removeTag(${index})" class="tag-remove">
                    <i class="fas fa-times"></i>
                </button>
            </span>
        `).join('');
    }
}

// –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
function showUploadModal() {
    if (!currentUser) {
        showNotification('–î–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∫—Ä–∏–ø—Ç–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É', 'error');
        showLoginModal();
        return;
    }
    
    currentTags = [];
    const uploadForm = document.getElementById('uploadForm');
    if (uploadForm) uploadForm.reset();
    
    const tagsList = document.getElementById('tagsList');
    if (tagsList) tagsList.innerHTML = '';
    
    const uploadModal = document.getElementById('uploadModal');
    const overlay = document.getElementById('modal-overlay');
    
    if (uploadModal) uploadModal.classList.add('active');
    if (overlay) overlay.classList.add('active');
}

function closeUploadModal() {
    const uploadModal = document.getElementById('uploadModal');
    const overlay = document.getElementById('modal-overlay');
    
    if (uploadModal) uploadModal.classList.remove('active');
    if (overlay) overlay.classList.remove('active');
}

function openScriptView(scriptId) {
    const script = scripts.find(s => s.id === scriptId);
    if (!script) return;

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ç–µ–∫—É—â–µ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞
    currentScriptId = scriptId;
    
    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
    script.views = (script.views || 0) + 1;
    saveScripts();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    const title = document.getElementById('viewScriptTitle');
    const description = document.getElementById('viewScriptDescription');
    const code = document.getElementById('viewScriptCode');
    const meta = document.getElementById('viewScriptMeta');
    const tags = document.getElementById('viewScriptTags');
    
    if (title) title.textContent = script.title;
    if (description) description.textContent = script.description;
    if (code) code.textContent = script.code;
    
    if (meta) {
        meta.innerHTML = `
            <div class="script-meta">
                <span class="script-author">
                    <i class="fas fa-user"></i>
                    ${script.author}
                </span>
                <span class="script-date">
                    <i class="fas fa-calendar"></i>
                    ${formatDate(script.createdAt)}
                </span>
                <span class="script-views">
                    <i class="fas fa-eye"></i>
                    ${script.views}
                </span>
                <span class="script-game">
                    <i class="fas fa-gamepad"></i>
                    ${script.game}
                </span>
            </div>
        `;
    }
    
    if (tags && script.tags) {
        tags.innerHTML = script.tags.map(tag => `
            <span class="tag">${tag}</span>
        `).join('');
    }
    
    const scriptViewModal = document.getElementById('scriptViewModal');
    const overlay = document.getElementById('modal-overlay');
    
    if (scriptViewModal) scriptViewModal.classList.add('active');
    if (overlay) overlay.classList.add('active');
}

function closeScriptViewModal() {
    const scriptViewModal = document.getElementById('scriptViewModal');
    const overlay = document.getElementById('modal-overlay');
    
    if (scriptViewModal) scriptViewModal.classList.remove('active');
    if (overlay) overlay.classList.remove('active');
}

// –î–µ–π—Å—Ç–≤–∏—è —Å–æ —Å–∫—Ä–∏–ø—Ç–∞–º–∏
function copyScript(scriptId) {
    const script = scripts.find(s => s.id === scriptId);
    if (!script) return;
    
    navigator.clipboard.writeText(script.code).then(() => {
        showNotification('–ö–æ–¥ —Å–∫—Ä–∏–ø—Ç–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!');
    }).catch(() => {
        // Fallback –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
        const textArea = document.createElement('textarea');
        textArea.value = script.code;
        document.body.appendChild(textArea);
        textArea.select();
        document.execCommand('copy');
        document.body.removeChild(textArea);
        showNotification('–ö–æ–¥ —Å–∫—Ä–∏–ø—Ç–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!');
    });
}

function shareScript(scriptId) {
    const script = scripts.find(s => s.id === scriptId);
    if (!script) return;
    
    const shareUrl = `${CONFIG.SHARE_BASE_URL}?script=${scriptId}`;
    
    if (navigator.share) {
        navigator.share({
            title: script.title,
            text: script.description,
            url: shareUrl
        });
    } else {
        navigator.clipboard.writeText(shareUrl).then(() => {
            showNotification('–°—Å—ã–ª–∫–∞ –Ω–∞ —Å–∫—Ä–∏–ø—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!');
        }).catch(() => {
            // Fallback
            const textArea = document.createElement('textarea');
            textArea.value = shareUrl;
            document.body.appendChild(textArea);
            textArea.select();
            document.execCommand('copy');
            document.body.removeChild(textArea);
            showNotification('–°—Å—ã–ª–∫–∞ –Ω–∞ —Å–∫—Ä–∏–ø—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!');
        });
    }
}

function shareCurrentScript() {
    if (currentScriptId) {
        shareScript(currentScriptId);
    }
}

function copyScriptCode() {
    const code = document.getElementById('viewScriptCode');
    if (!code) return;
    
    navigator.clipboard.writeText(code.textContent).then(() => {
        showNotification('–ö–æ–¥ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!');
    });
}

function downloadScript() {
    const title = document.getElementById('viewScriptTitle');
    const code = document.getElementById('viewScriptCode');
    
    if (!title || !code) return;

    const script = scripts.find(s => s.id === currentScriptId);
    if (script) {
        script.downloads = (script.downloads || 0) + 1;
        saveScripts();
    }
    
    const blob = new Blob([code.textContent], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    
    a.href = url;
    a.download = `${title.textContent.replace(/[^a-z0-9]/gi, '_')}.lua`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
    
    showNotification(`–°–∫—Ä–∏–ø—Ç "${title.textContent}" —Å–∫–∞—á–∞–Ω!`);
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞
function uploadScript() {
    const title = document.getElementById('scriptTitle');
    const description = document.getElementById('scriptDescription');
    const code = document.getElementById('scriptCode');
    const game = document.getElementById('scriptGame');
    
    if (!title || !description || !code || !game) return;
    
    const titleValue = title.value.trim();
    const descriptionValue = description.value.trim();
    const codeValue = code.value.trim();
    const gameValue = game.value;
    
    if (!titleValue || !descriptionValue || !codeValue || !gameValue) {
        showNotification('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è', 'error');
        return;
    }

    const newScript = {
        id: generateId(),
        title: titleValue,
        description: descriptionValue,
        code: codeValue,
        author: currentUser.username,
        game: gameValue,
        tags: [...currentTags],
        createdAt: new Date().toISOString(),
        views: 0,
        likes: 0,
        downloads: 0
    };

    scripts.unshift(newScript);
    saveScripts();
    renderScripts();
    closeUploadModal();
    
    showNotification(`–°–∫—Ä–∏–ø—Ç "${titleValue}" —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!`);
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è
    setTimeout(() => {
        shareScript(newScript.id);
    }, 1000);
}

// –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
function showLoginModal() {
    const username = prompt('–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:');
    if (username && username.trim()) {
        currentUser = { 
            username: username.trim(), 
            role: 'user',
            joinedAt: new Date().toISOString()
        };
        localStorage.setItem('currentUser', JSON.stringify(currentUser));
        updateAuthUI();
        showNotification(`–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${username.trim()}!`);
    }
}

function showRegisterModal() {
    const username = prompt('–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:');
    if (username && username.length >= 3) {
        currentUser = { 
            username: username.trim(), 
            role: 'user',
            joinedAt: new Date().toISOString()
        };
        localStorage.setItem('currentUser', JSON.stringify(currentUser));
        updateAuthUI();
        showNotification('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!');
    } else {
        showNotification('–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 3 —Å–∏–º–≤–æ–ª–æ–≤', 'error');
    }
}

function updateAuthUI() {
    const authButtons = document.querySelector('.auth-buttons');
    if (authButtons && currentUser) {
        authButtons.innerHTML = `
            <div class="user-info">
                <span class="user-greeting">–ü—Ä–∏–≤–µ—Ç, ${currentUser.username}!</span>
                <button class="btn btn-small" onclick="logout()">
                    <i class="fas fa-sign-out-alt"></i>
                    –í–´–ô–¢–ò
                </button>
            </div>
        `;
    }
}

function logout() {
    currentUser = null;
    localStorage.removeItem('currentUser');
    const authButtons = document.querySelector('.auth-buttons');
    if (authButtons) {
        authButtons.innerHTML = `
            <button class="btn btn-outline" onclick="showLoginModal()">
                <i class="fas fa-sign-in-alt"></i>
                –í–æ–π—Ç–∏
            </button>
            <button class="btn btn-primary" onclick="showRegisterModal()">
                <i class="fas fa-user-plus"></i>
                –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
            </button>
        `;
    }
    showNotification('–í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã');
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ–º—ã
function loadTheme() {
    const savedTheme = localStorage.getItem('theme') || 'dark';
    const body = document.body;
    const icon = document.querySelector('#themeToggle i');
    
    if (savedTheme === 'light') {
        body.classList.add('theme-light');
        if (icon) icon.className = 'fas fa-sun';
    } else {
        body.classList.add('theme-dark');
        if (icon) icon.className = 'fas fa-moon';
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
function setupEventListeners() {
    // –ü–æ–∏—Å–∫
    const searchInput = document.getElementById('searchInput');
    if (searchInput) {
        searchInput.addEventListener('input', searchScripts);
    }
    
    // Enter –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ–≥–æ–≤
    const tagInput = document.getElementById('tagInput');
    if (tagInput) {
        tagInput.addEventListener('keypress', function(event) {
            if (event.key === 'Enter') {
                event.preventDefault();
                addTag();
            }
        });
    }
    
    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ–º—ã
    const themeToggle = document.getElementById('themeToggle');
    if (themeToggle) {
        themeToggle.addEventListener('click', function() {
            const body = document.body;
            const isLight = body.classList.contains('theme-light');
            const icon = this.querySelector('i');
            
            if (isLight) {
                body.classList.remove('theme-light');
                body.classList.add('theme-dark');
                if (icon) icon.className = 'fas fa-moon';
                localStorage.setItem('theme', 'dark');
            } else {
                body.classList.remove('theme-dark');
                body.classList.add('theme-light');
                if (icon) icon.className = 'fas fa-sun';
                localStorage.setItem('theme', 'light');
            }
            
            // –ê–Ω–∏–º–∞—Ü–∏—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
            this.style.transform = 'rotate(360deg)';
            setTimeout(() => {
                this.style.transform = '';
            }, 500);
        });
    }
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª–æ–∫ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ
    document.addEventListener('click', function(event) {
        if (event.target.classList.contains('modal-overlay')) {
            closeUploadModal();
            closeScriptViewModal();
        }
    });
    
    // Header scroll effect
    window.addEventListener('scroll', function() {
        const header = document.querySelector('.site-header');
        if (header) {
            if (window.scrollY > 100) {
                header.classList.add('scrolled');
            } else {
                header.classList.remove('scrolled');
            }
        }
    });
}

console.log('%cüöÄ Gord Scripts Enhanced Loaded!', 'color:#3AA655;font-size:16px;font-weight:bold;');
console.log('%cüìÅ –°–∏—Å—Ç–µ–º–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞', 'color:#4FC3F7;font-size:14px;');
